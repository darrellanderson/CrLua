--- Display which secrets have been played (and which remain)
-- @author Darrell

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _deckHelper = getHelperClient('TI4_DECK_HELPER')
local _setupHelper = getHelperClient('TI4_SETUP_HELPER')

local _secretNameToAttrs = {}
local _secretNameList = {}

local function initSecrets()
    local cardNames = _deckHelper.getCardsWithSource({ deckName = 'Secret Objectives' })

    local isPoK = _setupHelper.getPoK()
    local cardNamesPoKSet = {}
    local cardNamesPoK = _deckHelper.getCardsWithSource({ deckName = 'Secret Objectives', source = 'PoK' })
    for _, cardNamePoK in ipairs(cardNamesPoK) do
        cardNamesPoKSet[cardNamePoK] = true
    end

    _secretNameToAttrs = {}
    _secretNameList = {}

    for _, cardName in ipairs(cardNames) do
        _secretNameToAttrs[cardName] = {
            abbr = assert(_deckHelper.getCardAbbreviation(cardName)),
            use = (not cardNamesPoKSet[cardName]) or isPoK
        }
        table.insert(_secretNameList, cardName)
    end

    table.sort(_secretNameList)
end

function getSecrets()
    local inHandGuidSet = {}
    for _, player in ipairs(Player.getPlayers()) do
        for i = 1, player.getHandCount() do
            for _, object in ipairs(player.getHandObjects(i)) do
                inHandGuidSet[object.guid] = true
            end
        end
    end

    local function isPlayedSecret(object)
        if object.tag ~= 'Card' then
            return false
        end
        if inHandGuidSet[object.getGUID()] then
            return false
        end
        if object.is_face_down then
            return false
        end
        if object.held_by_color then
            return false
        end
        return _secretNameToAttrs[object.getName()]
    end

    local played = {}
    for _, object in ipairs(getAllObjects()) do
        if isPlayedSecret(object) then
            local name = object.getName()
            played[name] = true
        end
    end

    -- Mark any "do not use" as played.
    for secretName, attrs in pairs(_secretNameToAttrs) do
        if not attrs.use then
            played[secretName] = true
        end
    end

    local remain = {}
    for _, secretName in ipairs(_secretNameList) do
        if not played[secretName] then
            remain[secretName] = true
        end
    end

    return played, remain
end

function updateSecrets()
    local played, remain = getSecrets()

    local buttonIndexToSecret = {}
    for i, secretName in ipairs(_secretNameList) do
        buttonIndexToSecret[(i - 1) * 2] = secretName
    end

    for _, button in ipairs(self.getButtons()) do
        local secretName = buttonIndexToSecret[button.index]
        if secretName then
            local label = played[secretName] and ('[s]' .. secretName .. '[/s]') or secretName
            if button.label ~= label then
                button.label = label
                self.editButton(button)
            end
        end
    end
end

-------------------------------------------------------------------------------

function onLoad(save_state)
    math.randomseed(tonumber(self.getGUID(), 16))
    initSecrets()

    local scaleUpDownHack = 4

    for i, secretName in ipairs(_secretNameList) do
        local row = math.floor((i - 1) / 3)
        local col = (i - 1) % 3

        local buttonParams = {
            click_function = 'doNothing',
            function_owner = self,
            label          = secretName,
            position       = {
                x = -0.8 + (col * 0.8),
                y = 0.21,
                z = -0.9 + (row * 0.135),
            },
            rotation       = { x = 0, y = 0, z = 0 },
            width          = 0,
            height         = 0,
            font_size      = 28 * scaleUpDownHack,
            scale          = { x = 1 / scaleUpDownHack, y = 1, z = 1 / scaleUpDownHack },
        }
        if col == 1 then
            buttonParams.position.z = buttonParams.position.z + 0.135 / 2.0
        end
        self.createButton(buttonParams)

        local buttonParams2 = {
            click_function = 'doNothing',
            function_owner = self,
            label          = assert(_secretNameToAttrs[secretName].abbr),
            position       = {
                x = buttonParams.position.x,
                y = buttonParams.position.y,
                z = buttonParams.position.z + 0.05
            },
            rotation       = { x = 0, y = 0, z = 0 },
            width          = 0,
            height         = 0,
            font_size      = 18 * scaleUpDownHack,
            scale          = { x = 1 / scaleUpDownHack, y = 1, z = 1 / scaleUpDownHack },
        }
        self.createButton(buttonParams2)
    end

    self.addContextMenuItem('Update Secrets', updateSecrets, false)

    Wait.time(periodicUpdateSecrets, math.random())
end

function onSetupHelperSetupFinished()
    initSecrets()
    updateSecrets()
end

-------------------------------------------------------------------------------

function doNothing()
end

function periodicUpdateSecrets()
    updateSecrets()
    Wait.time(periodicUpdateSecrets, 9 + (math.random() * 2))
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
