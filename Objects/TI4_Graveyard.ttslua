--- TI4 Graveyard bag v3.0, move objects inserted into this bag to correct locations.
-- @author original by Mantis
-- @author card handling by GarnetBear
-- @author May 2020 update by Darrell
-- @author v3 May 2020 update by Darrell
--
-- v3.1: safer transition when two cards forming a deck, and vice versa.
-- v3.2: wait for TTS before moving to final destination in order to preserve guid.
-- v3.3 [August 2020]: migrate to deck helper.

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _deckHelper = getHelperClient('TI4_DECK_HELPER')
local _exploreHelper = getHelperClient('TI4_EXPLORE_HELPER')

-- Bag with faction tokens.
local PICK_FACTION_BAG = 'Pick a Faction to Play'
local EXPLORE_TOKEN_BAG = 'Exploration Bag'

-------------------------------------------------------------------------------

local _exploreTokenNameSet = false
local _objectNameToBagGuid = {}

local _guidToPending = {}  -- waiting for put into self to finish
local _guidToLimbo = {}  -- put into self is done
local _guidToFinal = {}  -- waiting for put into final to finish

local _reportTrashed = false

-------------------------------------------------------------------------------

--- Get bag for object.
local function getNonCardDestination(objectTag, objectName)
    assert(type(objectName) == 'string')

    if string.len(objectName) == 0 then
        return false
    end

    -- Do we already know where to put it?
    local bagGuid = _objectNameToBagGuid[objectName]
    local bag = bagGuid and getObjectFromGUID(bagGuid)
    if bag then
        return bag
    end

    -- Look forand remember bag if found.  If more than one choose closest
    -- (reduces objects from flying over the table).
    -- Remember via guid to prevent trying to access a deleted bag later.
    -- Do not store "nacks" for objects with no bag, it could be unpacked!
    local acceptBag = {
        [objectName] = true,
        [objectName .. ' Bag'] = true,
        [objectName .. 's Bag'] = true,
    }
    if string.match(objectName, ' Faction Token$') then
        acceptBag[PICK_FACTION_BAG] = true
    end

    if not _exploreTokenNameSet then
        _exploreTokenNameSet = {}
        for _, name in ipairs(_exploreHelper.getExploreTokenNames()) do
            _exploreTokenNameSet[name] = true
        end
    end
    if _exploreTokenNameSet[objectName] then
        acceptBag[EXPLORE_TOKEN_BAG] = true
    end

    local bestDistance = false
    for _, candidate in ipairs(getAllObjects()) do
        local tag = candidate.tag
        local name = candidate.getName()
        if (tag == 'Bag' or tag == 'Infinite') and acceptBag[name] then
            local p1 = self.getPosition()
            local p2 = candidate.getPosition()
            local dSq = ((p1.x - p2.x) ^ 2 + (p1.z - p2.z) ^ 2)
            if not bestDistance or dSq < bestDistance then
                bag = candidate
                bestDistance = dSq
            end
        end
    end
    _objectNameToBagGuid[objectName] = bag and bag.getGUID()
    return bag
end

-------------------------------------------------------------------------------

local function reportTrashed(object)
    local function _report()
        local message = {}
        for name, countOrCards in pairs(_reportTrashed or {}) do
            local count = type(countOrCards) == 'table' and #countOrCards or countOrCards
            local cards = type(countOrCards) == 'table' and countOrCards
            local plural = count > 1 and (not string.match(name, '[ys]$') and 's') or ''
            if cards then
                cards = table.concat(cards, ', ')
                table.insert(message, count .. ' ' .. name .. plural .. ' (' .. cards .. ')')
            else
                table.insert(message, count .. ' ' .. name .. plural)
            end
        end
        message = 'Graveyard moving ' .. table.concat(message, ', ')
        printToAll(message)

        _reportTrashed = false
    end

    if not _reportTrashed then
        _reportTrashed = {}
        Wait.frames(_report, 2)
    end

    local name = object.getName()
    local deckName = object.tag == 'Card' and _deckHelper.getDeckName(object.getName())
    if deckName == 'Secret Objectives' then
        name = 'Secret Objective' -- ALWAYS hide secrets
        deckName = false
    end
    if deckName then
        local cards = _reportTrashed[deckName]
        if not cards then
            cards = {}
            _reportTrashed[deckName] = cards
        end
        if type(cards) == 'table' then
            table.insert(cards, name)
        elseif type(cards) == 'number' then
            _reportTrashed[deckName] = (_reportTrashed[deckName] or 0) + 1
        end
    else
        _reportTrashed[name] = (_reportTrashed[name] or 0) + 1
    end
end

-------------------------------------------------------------------------------

function _processLimbo()
    local function getFirst(tbl)
        for k, v in pairs(tbl) do
            return k, v
        end
    end

    -- Wait for puts into self or puts into final bags to finish.
    if getFirst(_guidToPending) or getFirst(_guidToFinal) then
        return
    end

    -- Otherwise nothing is in progress, get an item from limbo.
    local guid, bag = getFirst(_guidToLimbo)
    if not guid then
        return
    end
    assert(bag.tag == 'Bag' or bag.tag == 'Infinite')
    _guidToLimbo[guid] = nil

    -- Make sure it is still valid.
    local function haveGuid(guid)
        for _, entry in ipairs(self.getObjects()) do
            if entry.guid == guid then
                return true
            end
        end
    end
    if not haveGuid(guid) then
        Wait.frames(_processLimbo, 1)
        return  -- got removed somehow
    end

    -- Mark it as in-progress, put into final bag when take finishes.
    -- That put will trigger a future onObjectDestroy, furthers the cycle.
    _guidToFinal[guid] = bag

    local p = self.getPosition()
    local object = self.takeObject({
        guid              = guid,
        position          = { x = p.x, y = p.y + 5, z = p.z },
        smooth            = false,
        callback_function = function(object) bag.putObject(object) end
    })
end

function onObjectEnterContainer(container, enterObject)
    if container == self then

        local discardParams = {
            guid = enterObject.getGUID(),
            name = enterObject.getName(),
            containerGuid = self.getGUID(),
            waitForDestroy = true,
        }

        if enterObject.tag == 'Card' and _deckHelper.discardCard(discardParams) then
            -- deck helper is handling it.
            reportTrashed(enterObject)
        elseif enterObject.tag == 'Deck' and _deckHelper.discardDeck(discardParams) then
            -- deck helper is handling it.
            reportTrashed(enterObject)
        else
            local bag = getNonCardDestination(enterObject.tag, enterObject.getName())
            if bag then
                _guidToPending[enterObject.getGUID()] = bag
                reportTrashed(enterObject)
            end
        end
    end
end

function onObjectLeaveContainer(container, leaveObject)
    if container == self then
        -- Not normally needed, but just in case an object moves by non-self means.
        _guidToPending[leaveObject.getGUID()] = nil
        _guidToLimbo[leaveObject.getGUID()] = nil
    end
end

function onObjectDestroy(dyingObject)
    local guid = dyingObject.getGUID()

    if _guidToPending[guid] then
        _guidToLimbo[guid] = _guidToPending[guid]
        _guidToPending[guid] = nil
        Wait.frames(_processLimbo, 2)
    elseif _guidToFinal[guid] then
        _guidToFinal[guid] = nil
        Wait.frames(_processLimbo, 2)
    end
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
