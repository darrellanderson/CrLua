--- Pull captured planets to board.
-- @author Darrell

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _deckHelper = getHelperClient('TI4_DECK_HELPER')
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

--- Called by system helper when a system is activated.
function onSystemActivation(system)
    self.clearContextMenu()
    for _, planet in ipairs(system.planets or {}) do
        local function wrapper(clickerColor)
            fetchPlanet(clickerColor, planet.name, false)
            if planet.legendaryCard then
                fetchPlanet(clickerColor, planet.legendaryCard, true)
            end
        end
        self.addContextMenuItem('Fetch ' .. planet.name, wrapper)
    end
end

function fetchPlanet(clickerColor, planetName, isLegendaryCard)
    assert(type(clickerColor) == 'string' and type(planetName) == 'string')

    -- Find the card, src and dst zones.  Abort if not changing zone.
    local card = _findPlanetCard(planetName)
    if not card then
        printToColor('Unable to find "' .. planetName .. '" card', clickerColor, 'Red')
        return
    end
    local srcPlayer = _zoneHelper.zoneFromPosition(card.getPosition()) or '-'
    local dstPlayer = _zoneHelper.zoneFromPosition(self.getPosition()) or '-'
    if srcPlayer == dstPlayer then
        printToColor(dstPlayer .. ' already has "' .. planetName .. '" card', clickerColor, 'Red')
        return
    end

    -- Report card motion to all players.
    local message = { 'Moving "' .. planetName .. '"' }
    if srcPlayer and isLegendaryCard then
        local state = card.is_face_down and 'exhausted' or 'ready'
        table.insert(message, '(' .. state .. ')')
    end
    if srcPlayer then
        table.insert(message, 'from ' .. srcPlayer)
    end
    if dstPlayer then
        table.insert(message, 'to ' .. dstPlayer)
    end
    message = table.concat(message, ' ')
    broadcastToAll(message, clickerColor)

    -- Move card.
    local position = self.getPosition() + vector(0, 3, 0)
    local rotation = { x = 0, y = self.getRotation().y, z = 180 }
    if isLegendaryCard then
        position.y = position.y + 3
        rotation.y = (rotation.y + 270) % 360
        if srcPlayer then
            rotation.z = card.getRotation().z  -- preserve face up
        else
            rotation.z = 0  -- comes face up
        end
    end
    local collide = false
    local fast = false
    card.setPositionSmooth(position, collide, fast)
    card.setRotationSmooth(rotation, collide, fast)
end

function _findPlanetCard(planetName)
    for _, object in ipairs(getAllObjects()) do
        if object.tag == 'Card' and object.getName() == planetName then
            return object
        end
    end
    local deck = getObjectFromGUID(_deckHelper.getDeck('Planets'))
    for _, entry in ipairs(deck and deck.getObjects() or {}) do
        if entry.name == planetName then
            return deck.takeObject({
                position          = deck.getPosition() + vector(0, 3, 0),
                rotation          = deck.getRotation(),
                smooth            = false,
                guid              = entry.guid
            })
        end
    end
    local deck = getObjectFromGUID(_deckHelper.getDeck('Legendary Planets'))
    for _, entry in ipairs(deck and deck.getObjects() or {}) do
        if entry.name == planetName then
            return deck.takeObject({
                position          = deck.getPosition() + vector(0, 3, 0),
                rotation          = deck.getRotation(),
                smooth            = false,
                guid              = entry.guid
            })
        end
    end
end
