--- Roll dice with messages and async callback.
-- @author Darrell
--
-- Factor out dice management, handle deleting dice after save/load.

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local function copyTable(t)
    if t and type(t) == 'table' then
        local copy = {}
        for k, v in pairs(t) do
            copy[k] = type(v) == 'table' and copyTable(v) or v
        end
        t = copy
    end
    return t
end

-------------------------------------------------------------------------------

local _rollTable = {}
local _rollQueue = {}

-------------------------------------------------------------------------------

--- Remove any dice associated with this roll id, cancel any active roll.
function reset(rollId)
    assert(type(rollId) == 'string')
    local params = _rolls[rollId]
    if params then
        for _, dice in ipairs(params.dice or {}) do
            for _, guid in ipairs(dice, _diceGuids or {}) do
                local die = getObjectFromGUID(guid)
                if die then
                    destroyObject(die)
                end
            end
        end
        _rolls[rollId] = nil  -- coroutine exits when entry disappears
    end
end

--- Roll!
--
-- Params:
-- - id (string) : unique id.
-- - callbackGuid (string) : callback this object.
-- - callbackFunction (string) : callback function name.
-- - clearAfterSeconds (number) : remove dice after N seconds (default 60, max 300).
-- - position (table) : {xyz} dice position, if multiple dice TODO XXX
-- - dice (table) : list of dice.
-- Dice entries:
-- - id (string) : unique id (within this roll set).
-- - count (number) : now many dice to roll using this id (and color/name).
-- - color (string) : tint.
-- - name (string) : optional name.
--
-- Callback param table entries:
-- - dice (table) map from id to list of roll values.
--
-- DOES NOT RESET ACTIVE ROLLS, CALLER SHOULD IF NEEDED.
-- Async callback (rolling takes time).
function roll(params)
    assert(type(params.id) == 'string')
    assert(type(params.callbackGuid) == 'string')
    assert(type(params.callbackFunction) == 'string')
    assert(type(params.clearAfterSeconds) == 'number')
    assert(type(params.transform) == 'table')
    assert(type(params.transform.guid) == 'string')
    assert(type(params.transform.offset) == 'string')
    assert(type(params.dice) == 'table')
    for _, dice in ipairs(params.dice) do
        assert(type(dice.id) == 'string')
        assert(type(dice.count) == 'number')
        assert(type(dice.color) == 'string')
        assert(type(dice.name) == 'string')
    end

    _rolls[params.id] = params
    table.insert(_rollQueue, params)
    startLuaCoroutine(self, '_rollCoroutine')
end

-------------------------------------------------------------------------------

function _rollCoroutine()
    local params = table.remove(_rollQueue)
    if not params then
        return
    end
    -- TODO
end

-------------------------------------------------------------------------------

function onLoad(saveState)
    -- Remove any lingering dice, in progress rolls do not survive save/load.
    local state = saveState and string.len(saveState) > 0 and JSON.decode(saveState)
    if state then
        _rolls = state
        for id, _ in pairs(state) do
            reset(id)
        end
        _rolls = {}
    end
end

function onSave()
    return JSON.encode(_rolls)
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
