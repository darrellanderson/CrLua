--- Compute player scores.
-- @author Darrell, Milty
-- Assumes this score sheet for cells: https://docs.google.com/spreadsheets/d/1aIZZlwt8ePYxCVbxjNXjB5lMdl0kbyiTYU1Al8RUa4A/edit?usp=sharing

local TAG = 'CrLua.TI4.PlayerScore'

CrLua = CrLua or {}  -- global, <include> wraps in a do .. end block
CrLua.TI4 = CrLua.TI4 or {}
CrLua.TI4.PlayerScore = assert(not CrLua.TI4.PlayerScore) and {
    _require = { 'List', 'TTS.HelperClient', 'TTS.Overlap' },
    _allowMissingKeys = { 'PHASE1', 'PHASE2', 'SECRET', 'STRATEGY', 'AGENDA', 'ACTIONS' }
}

-- Use this value when no value for a field (e.g. no strategy card taken).
CrLua.TI4.PlayerScore.MISSING = ''

CrLua.TI4.PlayerScore.PHASE1 = {
    ['Diversify Research'] = '2 TECH 2 COLORS',
    ['Develop Weaponry'] = '2 UNIT UPGRADES',
    ['Sway the Council'] = '8 INFLUENCE',
    ['Erect a Monument'] = '8 RESOURCES',
    ['Negotiate Trade Routes'] = '5 TRADE GOODS',
    ['Lead From the Front'] = '3 COMMAND TOKENS',
    ['Intimidate Council'] = '2 SYS ADJ TO MR',
    ['Corner the Market'] = '4 PLANET SAME TRAIT',
    ['Found Research Outposts'] = '3 TECH SPECIALTY',
    ['Expand Borders'] = '6 NON-HOME PLANET',
    ['Amass Wealth'] = '3 INF 3 RES 3 TG',
    ['Build Defenses'] = '4 STRUCTURES',
    ['Discover Lost Outposts'] = '2 ATTACHMENTS',
    ['Engineer a Marvel'] = 'FLAG/WAR SUN',
    ['Explore Deep Space'] = '3 EMPTY SYS',
    ['Improve Infrastructure'] = '3 STRUCT NOT HOME',
    ['Make History'] = '2 LGND/MR/ANOM',
    ['Populate the Outer Rim'] = '3 EDGE SYS',
    ['Push Boundaries'] = '> 2 NGHBRS',
    ['Raise a Fleet'] = '5 NON-FGTR SHIPS',
}

CrLua.TI4.PlayerScore.PHASE2 = {
    ['Master the Sciences'] = '2 TECH 4 COLORS',
    ['Revolutionize Warfare'] = '3 UNIT UPGRADES',
    ['Manipulate Galactic Law'] = '16 INFLUENCE',
    ['Found a Golden Age'] = '16 RESOURCES',
    ['Centralize Galatic Trade'] = '10 TRADE GOODS',
    ['Galvanize the People'] = '6 COMMAND TOKENS',
    ['Conquer the Weak'] = '1 OPPONENT HOME',
    ['Unify the Colonies'] = '6 PLANET SAME TRAIT',
    ['Form Galactic Brain Trust'] = '5 TECH SPECIALTY',
    ['Subdue the Galaxy'] = '11 NON-HOME PLANET',
    ['Achieve Supremacy'] = 'FLAG/WS ON MR/HS',
    ['Become a Legend'] = '4 LGND/MR/ANOM',
    ['Command an Armada'] = '8 NON-FGTR SHIPS',
    ['Construct Massive Cities'] = '7 STRUCTURES',
    ['Control the Borderlands'] = '5 EDGE SYS',
    ['Hold Vast Reserves'] = '6 INF 6 RES 6 TG',
    ['Patrol Vast Territories'] = '5 EMPTY SYS',
    ['Protect the Border'] = '5 STRUCT NOT HOME',
    ['Reclaim Ancient Monuments'] = '3 ATTACHMENTS',
    ['Rule Distant Lands'] = '2 IN/ADJ OTHER HS',
}

CrLua.TI4.PlayerScore.SECRET = {
    ['Become the Gatekeeper'] = 'ALPHA AND BETA',
    ['Mine Rare Metals'] = '4 HAZARDOUS',
    ['Forge An Alliance'] = '4 CULTURAL',
    ['Monopolize Production'] = '4 INDUSTRIAL',
    ['Cut Supply Lines'] = 'BLOCKADE SD',
    ['Occupy the Seat of the Empire'] = 'MR W/ 3 SHIPS',
    ['Learn Secrets of the Cosmos'] = '3 ADJ TO ANOMALY',
    ['Control the Region'] = '6 SYSTEMS',
    ['Threaten Enemies'] = 'SYS ADJ TO HOME',
    ['Adapt New Strategies'] = '2 FACTION TECH',
    ['Master the Laws of Physics'] = '4 TECH 1 COLOR',
    ['Gather A Mighty Fleet'] = '5 DREADNOUGHTS',
    ['Form a Spy Network'] = '5 ACTION CARDS',
    ['Fuel the War Machine'] = '3 SPACE DOCKS',
    ['Establish A Perimeter'] = '4 PDS',
    ['Make an Example of Their World'] = 'BOMBARD LAST GF',
    ['Turn Their Fleets to Dust'] = 'SPC LAST SHIP',
    ['Destroy Their Greatest Ship'] = 'DESTORY WS/FLAG',
    ['Unveil Flagship'] = 'WIN W/ FLAGSHIP',
    ['Spark a Rebellion'] = 'WIN VS LEADER',

    -- PoK
    ['Become a Martyr'] = 'BECOME A MARTYR',
    ['Betray a Friend'] = 'BETRAY A FRIEND',
    ['Brave the Void'] = 'BRAVE THE VOID',
    ['Darken the Skies'] = 'DARKEN THE SKIES',
    ['Defy Space and Time'] = 'DEFY SPACE AND TIME',
    ['Demonstrate Your Power'] = 'DEMONSTRATE YOUR POWER',
    ['Destroy Heretical Works'] = 'DESTROY HERETICAL WORKS',
    ['Dictate Policy'] = 'DICTATE POLICY',
    ['Drive the Debate'] = 'DRIVE THE DEBATE',
    ['Establish Hegemony'] = 'ESTABLISH HEGEMONY',
    ['Fight with Precision'] = 'FIGHT WITH PRECISION',
    ['Foster Cohesion'] = 'FOSTER COHESION',
    ['Hoard Raw Materials'] = 'HOARD RAW MATERIALS',
    ['Mechanize the Military'] = 'MECHANIZE THE MILITARY',
    ['Occupy the Fringe'] = 'OCCUPY THE FRINGE',
    ['Produce en Masse'] = 'PRODUCE EN MASSE',
    ['Prove Endurance'] = 'PROVE ENDURANCE',
    ['Seize an Icon'] = 'SEIZE AN ICON',
    ['Stake Your Claim'] = 'STAKE YOUR CLAIM',
    ['Strengthen Bonds'] = 'STRENGTHEN BONDS',
}

CrLua.TI4.PlayerScore.AGENDA = {
    ['Shard of the Throne'] = 'SHARD of the THRONE',
    ['Shard of the Throne (PoK)'] = 'SHARD of the THRONE',
    ['The Crown of Emphidia'] = 'CROWN of EMPHIDIA',
    ['The Crown of Emphidia (PoK)'] = 'CROWN of EMPHIDIA',
    ['Holy Planet of Ixth'] = 'HOLY PLANET of IXTH',
    ['Seed of an Empire'] = 'SEED of an EMPIRE',
    ['Mutiny'] = 'MUTINY +1/-1',
}

CrLua.TI4.PlayerScore.STRATEGY = {
    ['Leadership'] = 'Leadership',
    ['Diplomacy'] = 'Diplomacy',
    ['Diplomacy (Revised)'] = 'Diplomacy',
    ['Politics'] = 'Politics',
    ['Construction'] = 'Construction',
    ['Trade'] = 'Trade',
    ['Warfare'] = 'Warfare',
    ['Technology'] = 'Technology',
    ['Imperial'] = 'Imperial',
}

CrLua.TI4.PlayerScore.SUPPORTS = {
    ['Support for the Throne (Blue)'] = 'SUPPORT for the THRONE',
    ['Support for the Throne (Purple)'] = 'SUPPORT for the THRONE',
    ['Support for the Throne (Yellow)'] = 'SUPPORT for the THRONE',
    ['Support for the Throne (Red)'] = 'SUPPORT for the THRONE',
    ['Support for the Throne (Green)'] = 'SUPPORT for the THRONE',
    ['Support for the Throne (White)'] = 'SUPPORT for the THRONE'
}

CrLua.TI4.PlayerScore.ACTIONS = {
    ['Imperial Rider'] = 'IMPERIAL RIDER'
}

-- This could probably pull from FactionHelper faction.frankenName nicknames?
CrLua.TI4.PlayerScore.factionNicknames = {
    ['The Arborec'] = 'Arborec',
    ['The Barony Of Letnev'] = 'Letnev',
    ['The Clan Of Saar'] = 'Saar',
    ['The Embers Of Muaat'] = 'Muaat',
    ['The Emirates Of Hacan'] = 'Hacan',
    ['The Federation Of Sol'] = 'Sol',
    ['The Ghosts Of Creuss'] = 'Creuss',
    ['The L1Z1X Mindnet'] = 'L1Z1X',
    ['The Mentak Coalition'] = 'Mentak',
    ['The Naalu Collective'] = 'Naalu',
    ['The Nekro Virus'] = 'Nekro',
    ["The Sardakk N'orr"] = "N'orr",
    ['The Universities of Jol-Nar'] = 'Jol-Nar',
    ['The Winnu'] = 'Winnu',
    ['The Xxcha Kingdom'] = 'Xxcha',
    ['The Yin Brotherhood'] = 'Yin',
    ['The Yssaril Tribes'] = 'Yssaril',
    ['The Nomad'] = 'Nomad',
    ["The Vuil'raith Cabal"] = "Vuil'raith",
    ['The Argent Flight'] = 'Argent',
    ['The Titans of Ul'] = 'Titans',
    ['The Empyrean'] = 'Empyrean',
    ['The Mahact Gene-Sorcerers'] = 'Mahact',
    ['The Naaz-Rokha Alliance'] = 'Naaz-Rokha',
}

CrLua.TI4.PlayerScore.colorAbbreviation = {
    ['Blue'] = 'U',
    ['Purple'] = 'P',
    ['Yellow'] = 'Y',
    ['Red'] = 'R',
    ['Green'] = 'G',
    ['White'] = 'B',
    ['Orange'] = 'O',
    ['Pink'] = 'K',
}

CrLua.TI4.PlayerScore.MECATOL = 'Custodians'
CrLua.TI4.PlayerScore.SCOREBOARD = 'Scoreboard'

local _factionHelper = CrLua.TTS.HelperClient.get('TI4_FACTION_HELPER')
local _zoneHelper = CrLua.TTS.HelperClient.get('TI4_ZONE_HELPER')

local _custodians = false

--- Get map from scoring relevant object name to lists of objects with name.
function CrLua.TI4.PlayerScore.getNameToScoreObjects()
    local keysAreObjectNames = {
        CrLua.TI4.PlayerScore.PHASE1,
        CrLua.TI4.PlayerScore.PHASE2,
        CrLua.TI4.PlayerScore.SECRET,
        CrLua.TI4.PlayerScore.AGENDA,
        CrLua.TI4.PlayerScore.STRATEGY,
        CrLua.TI4.PlayerScore.SUPPORTS,
        CrLua.TI4.PlayerScore.ACTIONS,
        { [CrLua.TI4.PlayerScore.MECATOL] = true },
        { [CrLua.TI4.PlayerScore.SCOREBOARD] = true },
    }

    local nameToScoreObjects = {}
    for _, useKeys in ipairs(keysAreObjectNames) do
        for k, _ in pairs(useKeys) do
            nameToScoreObjects[k] = {}
        end
    end

    for color, faction in pairs(_factionHelper.allFactions()) do
        local name = faction.tokenName .. ' Owner Token'
        nameToScoreObjects[name] = {}
    end

    for _, object in ipairs(getAllObjects()) do
        if object.tag ~= 'Card' or object.is_face_down == false then
            local objects = nameToScoreObjects[object.getName()]
            if objects then
                table.insert(objects, object)
                if object.getName() == CrLua.TI4.PlayerScore.MECATOL then
                    _custodians = object
                end
            end
        end
    end

    local nonEmpty = {}
    for k, v in pairs(nameToScoreObjects) do
        if #v > 0 then
            nonEmpty[k] = v
        end
    end
    return nonEmpty
end

--- Get map from scoring relevant object name to list of owner tokens on it.
function CrLua.TI4.PlayerScore.nameToOwnerTokens(nameToScoreObjects)
    assert(type(nameToScoreObjects) == 'table')

    local srcs = {}
    local dsts = {}
    for name, objects in pairs(nameToScoreObjects) do
        if string.find(name, ' Owner Token$') then
            srcs = CrLua.List.join(srcs, objects)
        else
            dsts = CrLua.List.join(dsts, objects)
        end
    end
    local dstToSrcs = CrLua.TTS.Overlap.overlap(srcs, dsts)

    local nameToOwnerTokens = {}
    for dst, srcs in pairs(dstToSrcs) do
        local name = dst.getName()
        nameToOwnerTokens[name] = CrLua.List.join(nameToOwnerTokens[name] or {}, srcs)
    end
    return nameToOwnerTokens
end

function CrLua.TI4.PlayerScore.score(scoreboard, ownerToken)
    assert(type(scoreboard) == 'userdata' and type(ownerToken) == 'userdata')

    -- Scoreboard local space x.
    local p = scoreboard.positionToLocal(ownerToken.getPosition())
    local u = -(p.x - 3.25) / 6.5
    local limit = 11
    if scoreboard.is_face_down then
        u = 1 - u
        limit = 15
    end
    return math.floor(u * limit)
end

function CrLua.TI4.PlayerScore.colorToScore(nameToScoreObjects, nameToOwnerTokens)
    assert(#nameToScoreObjects[CrLua.TI4.PlayerScore.SCOREBOARD] == 1)
    local scoreboard = nameToScoreObjects[CrLua.TI4.PlayerScore.SCOREBOARD][1]
    assert(scoreboard)
    local ownerTokens = nameToOwnerTokens[CrLua.TI4.PlayerScore.SCOREBOARD] or {}

    -- The scoreboard bounding box is larger than the image.  Prune out extras.
    if #ownerTokens > 0 then
        for i = #ownerTokens, 1, -1 do
            local center = ownerTokens[i].getPosition()
            local p = scoreboard.positionToLocal(center)
            if math.abs(p.z) > 0.5 then
                table.remove(ownerTokens, i)
            elseif p.x < -3.3 or p.x > 3.3 then
                table.remove(ownerTokens, i)
            end
        end
    end

    local ownerTokenNameToColor = {}
    for color, faction in pairs(_factionHelper.allFactions()) do
        local name = faction.tokenName .. ' Owner Token'
        ownerTokenNameToColor[name] = color
    end

    local colorToScore = {}
    for _, ownerToken in ipairs(ownerTokens) do
        local color = ownerTokenNameToColor[ownerToken.getName()]
        assert(color)
        local score = CrLua.TI4.PlayerScore.score(scoreboard, ownerToken)
        colorToScore[color] = math.max(colorToScore[color] or 0, score)
    end
    return colorToScore
end

-------------------------------------------------------------------------------

function CrLua.TI4.PlayerScore.setCellsPlayerNames(cells)
    assert(type(cells) == 'table')
    local colorToCellName = {
        ['Blue'] = 'B3',
        ['Purple'] = 'B4',
        ['Yellow'] = 'B5',
        ['Red'] = 'O3',
        ['Green'] = 'O4',
        ['White'] = 'O5',
        --['Orange'] = 'H',
        --['Pink'] = 'I',
    }
    for color, nameCell in pairs(colorToCellName) do
        -- Not safe to access missing colors, scan.
        local function steamName()
            for _, player in ipairs(Player.getPlayers()) do
                if player.color == color then
                    return player.steam_name
                end
            end
        end
        cells[nameCell] = steamName() or CrLua.TI4.PlayerScore.MISSING
    end
end

function CrLua.TI4.PlayerScore.setCellsFactions(cells)
    assert(type(cells) == 'table')
    local colorToCellFaction = {
        ['Blue'] = 'F3',
        ['Purple'] = 'F4',
        ['Yellow'] = 'F5',
        ['Red'] = 'S3',
        ['Green'] = 'S4',
        ['White'] = 'S5',
        --['Orange'] = 'H',
        --['Pink'] = 'I',
    }
    for color, factionCell in pairs(colorToCellFaction) do
        local faction = _factionHelper.fromColor(color)
        local factionNickname = faction and CrLua.TI4.PlayerScore.factionNicknames[faction.name]
        cells[factionCell] = factionNickname or CrLua.TI4.PlayerScore.MISSING
    end
end

function CrLua.TI4.PlayerScore.setCellsStrategyCards(cells, colorToStrategy)
    assert(type(cells) == 'table')
    local colorToCellStrategy = {
        ['Blue'] = 'K3',
        ['Purple'] = 'K4',
        ['Yellow'] = 'K5',
        ['Red'] = 'X3',
        ['Green'] = 'X4',
        ['White'] = 'X5',
        --['Orange'] = 'H',
        --['Pink'] = 'I',
    }
    for color, strategyCell in pairs(colorToCellStrategy) do
        local strategy = colorToStrategy[color]
        cells[strategyCell] = strategy and CrLua.TI4.PlayerScore.STRATEGY[strategy] or CrLua.TI4.PlayerScore.MISSING
    end
end

function CrLua.TI4.PlayerScore.setCellsScores(cells, colorToScore)
    assert(type(cells) == 'table' and type(colorToScore) == 'table')
    local colorToCellScore = {
        ['Blue'] = 'J3',
        ['Purple'] = 'J4',
        ['Yellow'] = 'J5',
        ['Red'] = 'W3',
        ['Green'] = 'W4',
        ['White'] = 'W5',
        --['Orange'] = 'H',
        --['Pink'] = 'I',
    }
    for color, scoreCell in pairs(colorToCellScore) do
        cells[scoreCell] = colorToScore[color] or 0
    end
end

function CrLua.TI4.PlayerScore.setCellsPublicObjectivesAndRound(cells, PHASE1objectives, PHASE2objectives, stageOneMap, stageTwoMap)
    assert(type(cells) == 'table' and type(PHASE1objectives) == 'table' and type(PHASE2objectives) == 'table')
    local stageOneCells = {
        'B7', 'B8', 'B9', 'B10', 'B11', 'B20',
    }
    local stageTwoCells = {
        'B14', 'B15', 'B16', 'B17', 'B18', 'B21',
    }
    local PublicCompletionCells = {
        ['Blue'] = 'G',
        ['Purple'] = 'H',
        ['Yellow'] = 'I',
        ['Red'] = 'J',
        ['Green'] = 'K',
        ['White'] = 'L',
        --['Orange'] = '',
        --['Pink'] = 'I',
    }
    local RoundCell = 'O1'

    local round = (#PHASE1objectives + #PHASE2objectives) - 1
    for _, object in ipairs(getAllObjects()) do
        if object.getName() == 'Incentive Program' and not object.is_face_down then
            round = round - 1
        end
    end
    cells[RoundCell] = math.max(round, 1)

    for _, cell in ipairs(stageOneCells) do
        cells[cell] = ''
        local row = string.match(cell, '^%a+(%d+)$')
        for _, col in pairs(PublicCompletionCells) do
            cells[ col .. row ] = ''
        end
    end
    for i, val in ipairs(PHASE1objectives) do
        local cell = stageOneCells[i]
        cells[cell] = CrLua.TI4.PlayerScore.PHASE1[val]
        local completed = stageOneMap[val]
        if completed then
            local row = string.match(cell, '^%a+(%d+)$')
            for _, color in ipairs(completed) do
                local col = PublicCompletionCells[color]
                local value = CrLua.TI4.PlayerScore.colorAbbreviation[color]
                if col and row and value then
                    cells[ col .. row ] = value
                end
            end
        end
    end

    for _, cell in ipairs(stageTwoCells) do
        cells[cell] = ''
        local row = string.match(cell, '^%a+(%d+)$')
        for _, col in pairs(PublicCompletionCells) do
            cells[ col .. row ] = ''
        end
    end
    for i, val in ipairs(PHASE2objectives) do
        local cell = stageTwoCells[i]
        cells[cell] = CrLua.TI4.PlayerScore.PHASE2[val]
        local completed = stageTwoMap[val]
        if completed then
            local row = string.match(cell, '^%a+(%d+)$')
            for _, color in ipairs(completed) do
                local col = PublicCompletionCells[color]
                local value = CrLua.TI4.PlayerScore.colorAbbreviation[color]
                if col and row and value then
                    cells[ col .. row ] = value
                end
            end
        end
    end
end

function CrLua.TI4.PlayerScore.setCellsSecretObjectives(cells, secretsOrder, playerSecrets)
    assert(type(cells) == 'table' and type(secretsOrder) == 'table' and type(playerSecrets) == 'table')
    local secretsCells = {
        { 'M7', 'R7' },
        { 'M8', 'R8' },
        { 'M9', 'R9' },
        { 'M10', 'R10' },
        { 'M11', 'R11' },
        { 'M12', 'R12' },
        { 'M13', 'R13' },
        { 'M14', 'R14' },
        { 'M15', 'R15' },
        { 'M16', 'R16' },
        { 'M17', 'R17' },
        { 'M18', 'R18' },
        { 'M19', 'R19' },
        { 'M20', 'R20' },
        { 'M21', 'R21' },
        { 'M22', 'R22' },
        { 'M23', 'R23' },
        { 'M24', 'R24' },
    }
    for _, cellPair in ipairs(secretsCells) do
        cells[cellPair[1]] = ''
        cells[cellPair[2]] = ''
    end
    for i, secret in ipairs(secretsOrder) do
        local color = assert(playerSecrets[secret])
        cells[secretsCells[i][1]] = CrLua.TI4.PlayerScore.SECRET[secret]
        cells[secretsCells[i][2]] = CrLua.TI4.PlayerScore.colorAbbreviation[color]
    end
end

function CrLua.TI4.PlayerScore.setCellsSupport(cells, supportMap)
    local SupportCells = {
        ['Blue'] = 'X8',
        ['Purple'] = 'X10',
        ['Yellow'] = 'X12',
        ['Red'] = 'X11',
        ['Green'] = 'X9',
        ['White'] = 'X7',
        --['Orange'] = 'H',
        --['Pink'] = 'I',
    }
    for _, cell in pairs(SupportCells) do
        cells[cell] = ''
    end
    for owner, target in pairs(supportMap) do
        cells[SupportCells[owner]] = CrLua.TI4.PlayerScore.colorAbbreviation[target]
    end
end

function CrLua.TI4.PlayerScore.setCellsMecatol(cells, MecatolPoints)
    local MecatolCells = {'G12', 'G13', 'H13', 'I13', 'J13', 'K13', 'L13'}
    for _, cell in ipairs(MecatolCells) do
        cells[cell] = ''
    end
    for i, color in ipairs(MecatolPoints) do
        cells[MecatolCells[i]] = CrLua.TI4.PlayerScore.colorAbbreviation[color]
    end
end

function CrLua.TI4.PlayerScore.setCellsOther(cells, otherPoints)
    local OtherPointCells = {
        ['Imperial Rider'] = 'X13',
        ['single'] = {
            {'S14', 'X14'},
            {'S15', 'X15'},
            {'S16', 'X16'},
            {'S17', 'X17'}
        },
        ['multi'] = {
            {
                nameCell = 'S18',
                colorCell = {
                    Blue = 'S19',
                    Purple = 'T19',
                    Yellow = 'U19',
                    Red = 'V19',
                    Green = 'W19',
                    White = 'X19',
                }
            }
        }
    }
    for _, cellPair in ipairs(OtherPointCells.single) do
        cells[cellPair[1]] = ''
        cells[cellPair[2]] = ''
    end
    for _, multi in ipairs(OtherPointCells['multi']) do
        cells[multi.nameCell] = ''
    end
    local singlePointCount = 0
    local multiPointCount = 0
    for key, map in pairs(otherPoints) do
        if key == 'Shard of the Throne' or key == 'The Crown of Emphidia' or key == 'Holy Planet of Ixth' then
            singlePointCount = singlePointCount + 1
            local cellNameAndColor = OtherPointCells.single[singlePointCount]
            if cellNameAndColor and #map > 0 then
                cells[cellNameAndColor[1]] = CrLua.TI4.PlayerScore.AGENDA[key]
                cells[cellNameAndColor[2]] = CrLua.TI4.PlayerScore.colorAbbreviation[map[1]]
            end
        elseif key == 'Imperial Rider' then
            if map ~= {} then cells[OtherPointCells[key]] = CrLua.TI4.PlayerScore.colorAbbreviation[map[1]] end
        else
            multiPointCount = multiPointCount + 1
            local multi = OtherPointCells['multi'][multiPointCount]
            if multi then
                cells[multi.nameCell] = CrLua.TI4.PlayerScore.AGENDA[key]
                for _, color in ipairs(map) do
                    cells[multi.colorCell[color]] = CrLua.TI4.PlayerScore.colorAbbreviation[color]
                end
            end
        end
    end
end

-------------------------------------------------------------------------------

function CrLua.TI4.PlayerScore.updatePublicOneObjectives(PHASE1objectives, nameToScoreObjects)
    assert(type(PHASE1objectives) == 'table')

    local stageOne = {}

    for name, scoreObjects in pairs(nameToScoreObjects) do
        local objective = CrLua.TI4.PlayerScore.PHASE1[name]
        if objective then table.insert(stageOne, name) end
    end

    local oldPHASE1 = PHASE1objectives or {}
    local newPHASE1 = stageOne or {}
    local updatedPHASE1 = CrLua.List.pruneAndAppendMissing(oldPHASE1, newPHASE1) or {}

    return updatedPHASE1
end

function CrLua.TI4.PlayerScore.updatePublicTwoObjectives(PHASE2objectives, nameToScoreObjects)
    assert(type(PHASE2objectives) == 'table')

    local stageTwo = {}

    for name, scoreObjects in pairs(nameToScoreObjects) do
        local objective = CrLua.TI4.PlayerScore.PHASE2[name]
        if objective then table.insert(stageTwo, name) end
    end

    local oldPHASE2 = PHASE2objectives or {}
    local newPHASE2 = stageTwo or {}
    local updatedPHASE2 = CrLua.List.pruneAndAppendMissing(oldPHASE2, newPHASE2) or {}

    return updatedPHASE2
end

function CrLua.TI4.PlayerScore.updateSecrets(secretsOrder, playerSecrets, nameToOwnerTokens)
    assert(type(secretsOrder) == 'table' and type(playerSecrets) == 'table')

    -- Map from secret name to owning player color.
    local updated = {}
    local newOrder = {}
    for name, ownerTokens in pairs(nameToOwnerTokens) do
        if CrLua.TI4.PlayerScore.SECRET[name] then
            -- Tolerate accidentally putting multiple tokens from the same player.
            local ownerSet = {}
            for _, ownerToken in ipairs(ownerTokens) do
                local faction = _factionHelper.fromTokenName(ownerToken.getName())
                if faction and faction.color then
                    ownerSet[faction.color] = true
                end
            end
            local ownersList = CrLua.List.fromKeys(ownerSet)

            if #ownersList == 1 then
                table.insert(newOrder, name)
                updated[name] = ownersList[1]
            end
        end
    end

    newOrder = CrLua.List.pruneAndAppendMissing(secretsOrder, newOrder)
    return newOrder, updated
end

function CrLua.TI4.PlayerScore.mapStageOne(nameToOwnerTokens)
    local stageOneMap = {}
    for name, ownerTokens in pairs(nameToOwnerTokens) do
        if CrLua.TI4.PlayerScore.PHASE1[name] then
            local tokenMap = {}
            for i, ownerToken in ipairs(ownerTokens) do
                local faction = _factionHelper.fromTokenName(ownerToken.getName())
                local playerColor = faction and faction.color
                if playerColor then
                    table.insert(tokenMap, playerColor)
                end
            end
            stageOneMap[name] = tokenMap
        end
    end
    return stageOneMap
end

function CrLua.TI4.PlayerScore.mapStageTwo(nameToOwnerTokens)
    local stageTwoMap = {}
    for name, ownerTokens in pairs(nameToOwnerTokens) do
        if CrLua.TI4.PlayerScore.PHASE2[name] then
            local tokenMap = {}
            for i, ownerToken in ipairs(ownerTokens) do
                local faction = _factionHelper.fromTokenName(ownerToken.getName())
                local playerColor = faction and faction.color
                if playerColor then
                    table.insert(tokenMap, playerColor)
                end
            end
            stageTwoMap[name] = tokenMap
        end
    end
    return stageTwoMap
end

function CrLua.TI4.PlayerScore.updateStrategy()
    local guidToName = {}
    local guidToPosition = {}
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        if CrLua.TI4.PlayerScore.STRATEGY[name] then
            local guid = object.getGUID()
            guidToName[guid] = name
            guidToPosition[guid] = object.getPosition()
        end
    end

    local guidToZone = _zoneHelper.zonesFromPositions(guidToPosition)
    local colorToStrategy = {}

    for guid, color in pairs(guidToZone) do
        local strategy = assert(guidToName[guid])
        if strategy then colorToStrategy[color] = strategy end
    end

    return colorToStrategy
end

function CrLua.TI4.PlayerScore.mapSupports(nameToOwnerTokens)
    local supportMap = {}
    for key, map in pairs(nameToOwnerTokens) do
        local color = string.match(key, '^Support for the Throne %((%a+)%)$')
        if color then
            local ownerToken = map[1].getName()
            local faction = _factionHelper.fromTokenName(ownerToken)
            local playerColor = faction.color
            if playerColor then
                supportMap[color] = playerColor
            end
        end
    end
    return supportMap
end

function CrLua.TI4.PlayerScore.getMecatolPoints(currentMecatolPoints, nameToOwnerTokens)
    assert(type(currentMecatolPoints) == 'table')

    local MecatolPoints = {}

    -- The Custodians Token bounds are a little too large.  Restrict further.
    local function insideCustodians(ownerToken)
        if not _custodians then
            return true
        end
        local p1 = ownerToken.getPosition()
        local p2 = _custodians.getPosition()
        local d = math.sqrt((p1.x - p2.x) ^ 2 + (p1.z - p2.z) ^ 2)
        return d < 1.5
    end

    local map = nameToOwnerTokens[CrLua.TI4.PlayerScore.MECATOL] or {}
    for i, token in ipairs(map) do
        local ownerToken = map[i].getName()
        local faction = _factionHelper.fromTokenName(ownerToken)
        local playerColor = faction and faction.color
        if playerColor and insideCustodians(token) then
            table.insert(MecatolPoints, playerColor)
        end
    end

    local oldPoints = currentMecatolPoints or {}
    local newPoints = MecatolPoints or {}
    local updatedPoints = CrLua.List.pruneAndAppendMissing(oldPoints, newPoints) or {}

    return updatedPoints
end

function CrLua.TI4.PlayerScore.mapOtherPoints(currentOtherPoints, nameToOwnerTokens)
    assert(type(currentOtherPoints) == 'table')

    local otherPoints = {}

    for key, map in pairs(nameToOwnerTokens) do
        if CrLua.TI4.PlayerScore.AGENDA[key] or CrLua.TI4.PlayerScore.ACTIONS[key] then
            if #map ~= 0 then otherPoints[key] = {} end
            for i, token in ipairs(map) do
                local ownerToken = map[i].getName()
                local faction = _factionHelper.fromTokenName(ownerToken)
                local playerColor = faction.color
                if playerColor then
                    table.insert(otherPoints[key], playerColor)
                end
            end
        end
    end

    local updatedPoints = {}
    for key, pointList in pairs(otherPoints) do
        local oldList = currentOtherPoints[key] or {}
        local newList = otherPoints[key] or {}
        local updatedList = CrLua.List.pruneAndAppendMissing(oldList, newList)
        updatedPoints[key] = updatedList
    end
    return updatedPoints
end
