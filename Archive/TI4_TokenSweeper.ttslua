--- Unpack faction bag.
-- @author the_mantis
-- @author Darrell July 2020 update

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _factionHelper = getHelperClient('TI4_FACTION_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

function onLoad()
    createButtons()
end

function createButtons()
    self.createButton({
        click_function = "clickTokens",
        function_owner = self,
        label          = "Get Tokens",
        position       = {x=0, y=0.2, z=0.6},
        width          = 1000,
        height         = 400,
        font_size      = 200,
        tooltip = 'Return All Command Tokens'
    })
    self.createButton({
        click_function = "clickSetup",
        function_owner = self,
        label          = "Unpack",
        position       = {x=0, y=0.2, z=-0.6},
        width          = 1000,
        height         = 400,
        font_size      = 200,
        tooltip = 'Unpack Faction Box'
    })
end

function _safeBroadcastToColor(message, playerColor, messageColor)
    for _, player in ipairs(Player.getPlayers()) do
        if player.color == playerColor then
            broadcastToColor(message, playerColor, messageColor)
            return
        end
    end
    broadcastToAll(message, messageColor)
end

function clickTokens(_, playerColor)
    local faction = _factionHelper.fromColor(playerColor)
    if not faction then
        _safeBroadcastToColor("No faction detected.", playerColor, {0.8,0.2,0.2})
		return
    end
    if not faction.tokenName then
        _safeBroadcastToColor("No command token bag detected.", playerColor, {0.8,0.2,0.2})
		return
    end

    local bagName = faction.tokenName .. " Command Tokens Bag"
    local tokenName = faction.tokenName .. " Command Token"

    local tokenBag = false
    local tokens = {}

    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        if object.tag == 'Bag' and name == bagName then
            tokenBag = object
        elseif name == tokenName and _zoneHelper.inTableZone(object.getPosition()) then
            table.insert(tokens, object)
        end
    end
    if not tokenBag then
        _safeBroadcastToColor("No command token bag detected.", playerColor, {0.8,0.2,0.2})
        return
    end
    for _, token in ipairs(tokens) do
        tokenBag.putObject(token)
    end
end

local LOCAL_OFFSET_XZ = {
    sheet = { 6, -0.2 },
    commandTokensBag = { 0, 0 },
    ownerTokensBag = { 0.9, -3.3 },
    other = { 7, -3.3 },
    tech = { 10.2, -3.3 },
    commandTokensXZandFLIP = {
        { 0.4, -2.1 },
        { -0.7, -2.1 },
        { -0.2, -1.2 },
        { -1, -0.7, flip=true },
        { -2.1, -0.7, flip=true },
        { -1.6, -1.7, flip=true },
        { -1, 0.3 },
        { -2.1, 0.3 }
    }
}

function clickSetup(_, playerColor)
    -- Choose a player color to unpack.  Could using the clicking player color
    -- (function argument), or in this case unpack the closest command sheet.
    local commandSheet, color = getClosestCommandSheetAndColor(self.getPosition())
    unpack(color)
end

-- Cannot pass arguments to coroutine.  Push to this list, pop when starting.
-- (Use push/pop in case starting multiple unpacks same frame).
local _unpackColor = {}

function unpack(playerColor)
    table.insert(_unpackColor, playerColor)
    startLuaCoroutine(self, 'unpackCoroutine')
end

function unpackCoroutine(playerColor)
    local playerColor = table.remove(_unpackColor)

    local function reportInfo(message)
        _safeBroadcastToColor(message, playerColor, playerColor)
    end
    local function reportError(message)
        _safeBroadcastToColor(message, playerColor, {0.8, 0.2, 0.2})
    end

    if not playerColor then
        reportError('No player color, aborting.')
        return 1
    end

    -- Get command sheet.
    local commandSheet = getCommandSheet(playerColor)
    if not commandSheet then
        reportError('Missing command sheet for ' .. playerColor)
        return 1
    end
    coroutine.yield(0)

    -- Get faction.
    local tokenName, ownerToken = getFactionTokenName(commandSheet)
    local function getFaction()
        for _, faction in pairs(_factionHelper.allFactions(true)) do
            if faction.tokenName == tokenName then
                return faction
            end
        end
    end
    local faction = getFaction()
    if not faction then
        reportError('No faction token detected.')
        return 1
    end
    coroutine.yield(0)

    reportInfo('Unpacking ' .. faction.name .. ' for ' .. playerColor)

    -- Get faction box, and locations for in-player-area items.
    local boxName = faction.tokenName .. ' Box'
    local techDeckName = 'Technology Cards'
    local noteDeckName = 'Notes (' .. playerColor .. ')'
    local flagshipName = playerColor .. ' Flagship'
    local scoreboardName = 'Scoreboard'

    local box = false
    local techDeck = false
    local noteDeck = false
    local flagship = false
    local scoreboard = false

    for _, object in ipairs(getAllObjects()) do
        local tag = object.tag
        local name = object.getName()
        local pos = object.getPosition()
        if tag == 'Bag' and name == boxName then
            box = object
        elseif tag == 'Deck' and name == techDeckName and isInCommandSheetZone(commandSheet, pos) then
            techDeck = object
        elseif tag == 'Deck' and name == noteDeckName then
            noteDeck = object
        elseif name == flagshipName then
            flagship = object
        elseif name == scoreboardName then
            scoreboard = object
        end
    end
    coroutine.yield(0)

    if not box then
        reportError('Missing ' .. boxName)
        return 1
    elseif box.getQuantity() < 5 then
        reportError('Box missing components for ' .. faction)
        return 1
    end
    if not techDeck then
        reportError('Missing ' .. techDeckName)
        return 1
    end
    if not noteDeck then
        reportError('Missing ' .. noteDeckName)
        return 1
    end
    if not flagship then
        reportError('Missing ' .. flagshipName)
        return 1
    end
    if not scoreboard then
        reportError('Missing ' .. scoreboard)
        return 1
    end

    -- Start unpacking!
    local numLoose = 0

    local techBagName = faction.tokenName .. ' Tech Bag'
    local promissoryBagName = faction.tokenName .. ' Promissory Bag'
    local planetsBagName = faction.tokenName .. ' Planets Bag'
    local ownerTokensBagName = faction.tokenName .. ' Owner Tokens Bag'
    local commandTokensBagName = faction.tokenName .. ' Command Tokens Bag'
    local homeSystemTileName = faction.tokenName .. ' Tile'

    local foundTech = false
    local foundPromissory = false
    local foundPlanets = false
    local commandTokensBag = false
    local ownerTokensBag = false
    local factionSheet = false
    local homeSystemTile = false

    local takePosition = {}
    takePosition[homeSystemTileName] = getHomePosition(commandSheet)

    if faction.tokenName == 'Ghosts of Creuss' then
        takePosition['Creuss Gate Tile'] = takePosition[homeSystemTileName]
        takePosition[homeSystemTileName] = getGhostsHomePosition(commandSheet)
    end

    local numLoose = 0
    for _, entry in ipairs(box.getObjects()) do
        if entry.name == techBagName then
            unpackCards(box, entry.guid, techDeck)
            foundTech = true
        elseif entry.name == promissoryBagName then
            unpackCards(box, entry.guid, noteDeck)
            foundPromissory = true
        elseif entry.name == planetsBagName then
            numLoose = unpackCardsLoose(box, entry.guid, commandSheet, numLoose)
            foundPlanets = true
        elseif entry.name == ownerTokensBagName then
            ownerTokensBag = unpackOffset(box, entry.guid, commandSheet, LOCAL_OFFSET_XZ.ownerTokensBag)
        elseif entry.name == commandTokensBagName then
            commandTokensBag = unpackOffset(box, entry.guid, commandSheet, LOCAL_OFFSET_XZ.commandTokensBag)
        elseif string.match(entry.name, ' Sheet$') then
            factionSheet = unpackOffset(box, entry.guid, commandSheet, LOCAL_OFFSET_XZ.sheet)
        elseif takePosition[entry.name] then
            homeSystemTile = box.takeObject({
                guid = entry.guid,
                position = takePosition[entry.name]
            })
        else
            unpackOffset(box, entry.guid, commandSheet, LOCAL_OFFSET_XZ.other, { -numLoose, 0 })
            numLoose = numLoose + 1
        end
        coroutine.yield(0)
    end
    coroutine.yield(0)

    if not foundTech then
        reportError('Missing tech bag')
        return 1
    end
    if not foundPromissory then
        reportError('Missing promissory bag')
        return 1
    end
    if not foundPlanets then
        reportError('Missing planets bag')
        return 1
    end
    if not commandTokensBag then
        reportError('Missing command tokens bag')
        return 1
    end
    if not ownerTokensBag then
        reportError('Missing owner tokens bag')
        return 1
    end
    if not factionSheet then
        reportError('Missing faction sheet')
        return 1
    end
    if not homeSystemTile then
        reportError('Missing home system tile')
        return 1
    end

    -- Wait for things to stop moving.
    local items = {}
    local function addObjects(objects)
        for _, object in ipairs(objects) do
            table.insert(items, {
                object = object,
                name = object.getName(),
                guid = object.getGUID()
            })
        end
    end
    addObjects({ factionSheet, commandTokensBag, ownerTokensBag, homeSystemTile, ownerToken })
    local function anyMissing(doReport)
        for _, item in ipairs(items) do
            if not getObjectFromGUID(item.guid) then
                if doReport then
                    reportError('Missing ' .. item.name)
                end
                return true
            end
        end
    end
    local function busy()
        for _, item in ipairs(items) do
            if not item.object.resting then
                return true
            end
        end
    end
    while not anyMissing(false) and busy() do
        coroutine.yield(0)
    end
    if anyMissing(true) then
        return 1
    end

    -- Move the owner token "up" in case it is beneath anything.
    ownerToken.translate({ x = 0, y = 5, z = 0 })
    coroutine.yield(0)
    coroutine.yield(0)  -- again out of paranoia
    while busy() do
        coroutine.yield(0)
    end

    -- Lock!
    factionSheet.setLock(true)
    homeSystemTile.setLock(true)
    commandTokensBag.setLock(true)
    ownerTokensBag.setLock(true)

    -- Unpack command, owner tokens.
    for _, xzAndFlip in ipairs(LOCAL_OFFSET_XZ.commandTokensXZandFLIP) do
        unpackOffset(commandTokensBag, nil, commandSheet, xzAndFlip)
    end
    coroutine.yield(0)
    unpackScoreboardOwnerTokens(ownerTokensBag, scoreboard, playerColor)
    coroutine.yield(0)

    -- Unpack starting tech.
    unpackStartingTech(techDeck, faction.startingTech, commandSheet)
    coroutine.yield(0)

    -- Get unit bags.
    local unitBags = getUnitBags(playerColor)
    coroutine.yield(0)

    -- Rename flagship, wait for rename to finish before unpacking in case flagship is needed.
    local flagshipBag = unitBags['Flagship']
    local numFlagships = flagshipBag.getQuantity()
    renameFlagship(flagshipBag, faction.flagship, faction.flagshipDescription)
    coroutine.yield(0)
    while flagshipBag.getQuantity() < numFlagships do
        coroutine.yield(0)
    end

    unpackStartingUnits(unitBags, faction.startingUnits, homeSystemTile)
    coroutine.yield(0)

    -- Remind players of further setup.
    if faction.tokenName == "Winnu" then
        reportInfo("Pick 1 technology and return the other 3 to your deck.")
    end
    if faction.tokenName == "Lazax" then
        reportInfo("Pick 1 technology and return the other 3 to your deck.")
    end
    if faction.tokenName == "Zeth Contingency" then
        reportInfo("Pick 2 technologies and return the other 2 to your deck.")
    end

    return 1
end

function getClosestCommandSheetAndColor(position)
    assert(type(position) == 'table')
    local colorToCommandSheet = {}
    for _, object in ipairs(getAllObjects()) do
        local color = string.match(object.getName(), '^Command Sheet %((%a+)%)$')
        if color then
            colorToCommandSheet[color] = object
        end
    end

    local best = false
    local bestDistanceSq = false
    local p1 = position
    for color, commandSheet in pairs(colorToCommandSheet) do
        local p2 = commandSheet.getPosition()
        local distanceSq = (p1.x - p2.x)^2 + (p1.z - p2.z)^2
        if not best or distanceSq < bestDistanceSq then
            best = color
            bestDistanceSq = distanceSq
        end
    end

    return colorToCommandSheet[best], best
end

function getCommandSheet(playerColor)
    assert(type(playerColor) == 'string')
    local commandSheetName = 'Command Sheet (' .. playerColor .. ')'
    local commandSheet = false
    for _, object in ipairs(getAllObjects()) do
        if object.getName() == commandSheetName then
            return object
        end
    end
end

function isInCommandSheetZone(commandSheet, position)
    assert(type(commandSheet) == 'userdata' and type(position) == 'table')
    local bb = {
        min = {
            x = -3,
            z = -6,
        },
        max = {
            x = 12,
            z = 3,
        }
    }
    local p = commandSheet.positionToLocal(position)
    return bb.min.x <= p.x and p.x <= bb.max.x and bb.min.z <= p.z and p.z <= bb.max.z
end

function getFactionTokenName(commandSheet)
    assert(type(commandSheet) == 'userdata')

    local inHandGuidSet = _zoneHelper.inHand()
    local tokenNameSet = {}
    for name, faction in pairs(_factionHelper.allFactions(true)) do
        tokenNameSet[assert(faction.tokenName)] = true
    end

    local function getFactionTokenNameIfInZone(ownerToken)
        -- Filter to only not-in-hand, yes-in-zone.
        if inHandGuidSet[ownerToken.getGUID()] then
            return false
        end
        if not isInCommandSheetZone(commandSheet, ownerToken.getPosition()) then
            return false
        end

        -- If this object exactly matches a faction name use it.
        local name = ownerToken.getName()
        if tokenNameSet[name] then
            return name
        end

        -- Otherwise look for an owner token.
        local factionName = string.match(name, '^(.+) Owner Token$')
        if not factionName then
            return false
        end
        if tokenNameSet[factionName] then
            return factionName
        end
    end

    for _, object in ipairs(getAllObjects()) do
        local factionTokenName = getFactionTokenNameIfInZone(object)
        if factionTokenName then
            return factionTokenName, object
        end
    end
end

function unpackOffset(container, entryGuid, commandSheet, offsetXZ, extraXZ)
    assert((container.tag == 'Bag' or container.tag == 'Deck') and (entryGuid == nil or type(entryGuid) == 'string') and type(commandSheet) == 'userdata' and type(offsetXZ) == 'table')
    local pos = { x = offsetXZ[1], y = 1, z = offsetXZ[2] }
    if extraXZ then
        pos.x = pos.x + (extraXZ[1] or 0)
        pos.z = pos.z + (extraXZ[2] or 0)
    end
    pos = commandSheet.positionToWorld(pos)
    return container.takeObject({
        guid = entryGuid,
        position = pos,
        rotation = { x = (offsetXZ.flip and 180 or 0), y = commandSheet.getRotation().y, z = 0 },
    })
end

function unpackCards(container, cardsBagGuid, deck)
    assert(container.tag == 'Bag' and type(cardsBagGuid) == 'string' and deck.tag == 'Deck')
    local pos = container.getPosition()
    local cardsBag = container.takeObject({
        guid = cardsBagGuid,
        position = { x = pos.x, y = pos.y + 5, z = pos.z }
    })
    local pos = cardsBag.getPosition()
    for i, entry in ipairs(cardsBag.getObjects()) do
        local card = cardsBag.takeObject({
            position = { x = pos.x, y = pos.y + 5 + i, z = pos.z }
        })
        deck.putObject(card)
    end
    container.putObject(cardsBag)
end

function unpackCardsLoose(container, cardsBagGuid, commandSheet, numLoose)
    assert(container.tag == 'Bag' and type(cardsBagGuid) == 'string' and type(commandSheet) == 'userdata' and type(numLoose) == 'number')
    local pos = container.getPosition()
    local cardsBag = container.takeObject({
        guid = cardsBagGuid,
        position = { x = pos.x, y = pos.y + 5, z = pos.z }
    })
    for i, entry in ipairs(cardsBag.getObjects()) do
        unpackOffset(cardsBag, entry.guid, commandSheet, LOCAL_OFFSET_XZ.other, { -numLoose, 0 })
        numLoose = numLoose + 1
    end
    container.putObject(cardsBag)
    return numLoose
end

function unpackStartingTech(techDeck, techs, commandSheet)
    assert(techDeck.tag == 'Deck' and type(techs) == 'table' and type(commandSheet) == 'userdata')

    local techToGuid = {}
    for _, tech in ipairs(techs) do
        techToGuid[tech] = false
    end

    for _, entry in ipairs(techDeck.getObjects()) do
        if techToGuid[entry.name] == false then
            techToGuid[entry.name] = entry.guid
        end
    end

    for i, tech in ipairs(techs) do
        local guid = assert(techToGuid[tech])
        unpackOffset(techDeck, guid, commandSheet, LOCAL_OFFSET_XZ.tech, { 0, i })
    end
end

function getUnitBags(playerColor)
    assert(type(playerColor) == 'string')
    local unitList = {
        "Infantry",
        "Fighter",
        "Destroyer",
        "Cruiser",
        "Carrier",
        "Dreadnought",
        "War Sun",
        "Space Dock",
        "PDS",
        "Flagship"
    }
    local colorUnitNameSet = {}
    for _, unitName in ipairs(unitList) do
        colorUnitNameSet[playerColor .. ' ' .. unitName] = true
    end
    local unitBags = {}
    for _, object in ipairs(getAllObjects()) do
        local name = object.getName()
        if object.tag == 'Bag' and colorUnitNameSet[object.getName()] then
            local unitName = string.match(name, '^' .. playerColor .. ' (.*)$')
            unitBags[unitName] = object
        end
    end
    for _, unitName in ipairs(unitList) do
        assert(unitBags[unitName])
    end
    return unitBags
end

function unpackStartingUnits(unitBags, startingUnits, homeSystemTile)
    assert(type(unitBags) == 'table' and type(startingUnits) == 'table' and type(homeSystemTile) == 'userdata')

    local startingUnitsBags = {}
    for k, v in pairs(startingUnits) do
        k = string.gsub(k, '_', ' ')
        local bag = assert(unitBags[k])
        if bag then
            for _ = 1, v do
                table.insert(startingUnitsBags, bag)
            end
        end
    end
    if #startingUnitsBags > 0 then
        local dPhi = math.pi * 2.0 / #startingUnitsBags
        local r = 1.5
        for i, bag in ipairs(startingUnitsBags) do
            local phi = dPhi * i
            local pos = {
                x = math.cos(phi) * r,
                y = 1,
                z = math.sin(phi) * r
            }
            pos = homeSystemTile.positionToWorld(pos)
            bag.takeObject({
                position = pos,
            })
        end
    end
end

function renameFlagship(flagshipBag, name, desc)
    assert(flagshipBag.tag == 'Bag' and type(name) == 'string' and type(desc) == 'string')

    flagshipBag.setName(name)
    flagshipBag.setDescription(desc)

    local pos = flagshipBag.getPosition()
    for _, entry in ipairs(flagshipBag.getObjects()) do
        local flagship = flagshipBag.takeObject({
            guid = entry.guid,
            position = { x = pos.x, y = pos.y + 5, z = pos.z },
            smooth = false,
            callback_function = function(object) flagshipBag.putObject(object) end
        })
        flagship.setName(name)
        flagship.setDescription(desc)
    end
end

function getHomePosition(commandSheet)
    assert(type(commandSheet) == 'userdata')
    -- Find the hex closest to the command sheet, skipping 3
    local p1 = commandSheet.getPosition()
    local best = false
    local bestDistanceSq = false
    for i = 1, #tilePositions, 3 do
        local p2 = tilePositions[i]
        local distanceSq = (p1.x - p2.x) ^ 2 + (p1.z - p2.z) ^ 2
        if not best or distanceSq < bestDistanceSq then
            best = p2
            bestDistanceSq = distanceSq
        end
    end
    -- Return a copy in case caller mutates it!
    return { x = best.x, y = best.y, z = best.z }
end

function getGhostsHomePosition(commandSheet)
    assert(type(commandSheet) == 'userdata')
    local pos = getHomePosition(commandSheet)
    if pos.x < -1 then
        pos.x = pos.x - 12
    elseif pos.x > 1 then
        pos.x = pos.x + 12
    elseif pos.z > 1 then
        pos.x = pos.x + 12
        pos.z = pos.z + 1
    else
        pos.x = pos.x - 12
        pos.z = pos.z - 1
    end
    return pos
end

function unpackScoreboardOwnerTokens(ownerTokensBag, scoreboard, playerColor)
    local function getPlayerIndex()
        for i, color in ipairs(Player.getColors()) do
            if color == playerColor then
                return i
            end
        end
        error('illegal color "' .. playerColor .. '"')
    end
    local idx = getPlayerIndex()

    -- Place token stack near scoreboard.
    local OWNER_TOKEN_COUNT = 10
    local SPACING_X = 0.6
    local SPACING_Z = 0.5
    local dx = ((idx - 1) % 2) * SPACING_X
    local dz = math.floor((idx - 1) / 2) * SPACING_Z
    local p = scoreboard.positionToWorld({
        x = (4.2 + dx) * (scoreboard.is_face_down and -1 or 1),
        y = 0,
        z = -1.5 + dz
    })
    for i = 1, OWNER_TOKEN_COUNT do
        p.y = p.y + 0.11
        ownerTokensBag.takeObject({
            position = p,
            rotation = { x = 0, y = scoreboard.getRotation().y + 90, z = 0 }
        })
    end

    -- Place token on score zero.
    local SPACING_X = 0.3
    local SPACING_Z = 0.2
    local dx = ((idx - 1) % 2) * SPACING_X
    local dz = math.floor((idx - 1) / 2) * SPACING_Z
    local p = scoreboard.positionToWorld({
        x = (2.75 + dx) * (scoreboard.is_face_down and -1 or 1),
        y = (0.5 + (idx * 0.2)) * (scoreboard.is_face_down and -1 or 1),
        z = -0.4 + dz
    })

    ownerTokensBag.takeObject({
        position = p,
        rotation = { x = 0, y = scoreboard.getRotation().y + 90, z = 0 }
    })
end

tilePositions = {
    {x=15.75,y=2,z=-9.093},
    {x=10.5,y=2,z=-12.124},
    {x=5.25,y=2,z=-15.155},
    {x=0,y=2,z=-18.187},
    {x=-5.25,y=2,z=-15.155},
    {x=-10.5,y=2,z=-12.124},
    {x=-15.75,y=2,z=-9.093},
    {x=-15.75,y=2,z=-3.031},
    {x=-15.75,y=2,z=3.031},
    {x=-15.75,y=2,z=9.093},
    {x=-10.5,y=2,z=12.124},
    {x=-5.25,y=2,z=15.155},
    {x=0,y=2,z=18.187},
    {x=5.25,y=2,z=15.155},
    {x=10.5,y=2,z=12.124},
    {x=15.75,y=2,z=9.093},
    {x=15.75,y=2,z=3.031},
    {x=15.75,y=2,z=-3.031}
}

-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
