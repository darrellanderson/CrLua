function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _deckHelper = getHelperClient('TI4_DECK_HELPER')
local _exploreHelper = getHelperClient('TI4_EXPLORE_HELPER')
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')

-- Tell explore helper about attach tokens.
local ATTACH_TOKENS = {
    {
        cardName = 'Research Station',
        tokenName = 'Research Station Token',
        decal = false,  -- no planet card to apply
        frontier = true,  -- anchor if no planet
    },
    -- ... more here ...
}

-- Tell deck helper about cards (graveyard to discard pile).
local CARDS = {
    {
        cardName = 'Research Station',
        deckName = 'Frontier Exploration',
    },
    -- ... more here ...
}

-- Tell system helper about resource/influence cards (build area, vote counting).
local RESOURCE_INFLUENCE_MODIFIERS = {
    {
        name = 'Trade Station Ability',
        resources = 2,
        influence = 0
    },
}

function onLoad(save_state)
    print(self.getName() .. ' onLoad')
    for _, attachToken in ipairs(ATTACH_TOKENS) do
        _exploreHelper.injectAttachToken(attachToken)
        print('injected attach token ' .. attachToken.tokenName)
    end
    for _, card in ipairs(CARDS) do
        _deckHelper.injectCard(card)
        print('injected card ' .. card.cardName)
    end
    for _, modifier in ipairs(RESOURCE_INFLUENCE_MODIFIERS) do
        _systemHelper.injectResourceInfluenceModifier(modifier)
        print('injected resource modifier ' .. modifier.name)
    end
end
