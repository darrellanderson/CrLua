local TAG = 'AutoFillMultiRollerArena'

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')
local _unitHelper = getHelperClient('TI4_UNIT_HELPER')

-- This needs to be global for poking a new value in when updating the object.
_activeSystemGuid = false

-- Remember locked items, restore when warped back.
_lockedGuidSet = {}

-------------------------------------------------------------------------------

function onLoad(saveState)
    createButtons()

    -- Load the active system when first pulled from a bag.  Take care to
    -- avoid an infinite loop if this onLoad is via self.reload().
    local system = _systemHelper.getActivatedSystem()
    if system then
        onSystemActivation(system)
    end
end

function onPlayerTurnEnd(player_color_end, player_color_next)
    -- If there are still units here warp them out before udpating.
    if _activeSystemGuid then
        warpOut()
    end
    _activeSystemGuid = false
end

function _applyPlanetDecals(system)
    local decals = {}

    for _, planet in ipairs(system.planets or {}) do
        if planet.planetDecal then
            table.insert(decals, {
                name = planet.name .. ' decal',
                url = planet.planetDecal,
                position = { x = planet.position.x, y = 0.1, z = planet.position.z },
                rotation = { x = 90, y = 180, z = 0 },
                scale = { x = 2.3, y = 2.3, z = 1 }, -- scale XY is image size in world units, not "scale"
            })
        end
    end

    -- Always set even if none, to remove any old ones.
    self.setDecals(decals)
end

function onSystemActivation(system)
    if _activeSystemGuid == system.guid then
        return
    end
    _activeSystemGuid = assert(system.guid)

    -- Replace our diffuse image with the one from the activated tile.
    local systemObject = getObjectFromGUID(system.guid)
    local systemCustom = systemObject.getCustomObject()
    local custom = self.getCustomObject()

    -- Only update the arena tile if image changed.  This *seems* redundant
    -- with the _activeSystemGuid check at the top of this function, but reload
    -- causes the script to reset.  After reset, the onLoad will attempt to
    -- apply the current active system, and stop when it sees the image set here.
    if custom.diffuse ~= systemCustom.diffuse then

        -- Update arena visuals.
        _applyPlanetDecals(system, systemObject)
        custom.diffuse = systemCustom.diffuse
        self.setCustomObject(custom)

        -- Resetting custom object triggers delete.  Tell Deleted Items it is ok.
        ignoreDeletedItem(self.getGUID())
        self.reload()  -- script gets reset, calls onLoad!
    end
end

local _deletedItemsGuid = false
function ignoreDeletedItem(guid)
    local deletedItems = _deletedItemsGuid and getObjectFromGUID(_deletedItemsGuid)
    if not deletedItems then
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == 'TI4 Deleted Items' then
                _deletedItemsGuid = object.getGUID()
                deletedItems = object
                break
            end
        end
    end
    if deletedItems then
        deletedItems.call('ignoreGuid', guid)
    end
end

-------------------------------------------------------------------------------

function moveUnit(unitObject, position, isWarpIn)
    assert(type(unitObject) == 'userdata' and type(position) == 'table')

    -- Unlock units while in the arena, but restore when warping back.
    if isWarpIn and unitObject.getLock() then
        _lockedGuidSet[unitObject.getGUID()] = true
    elseif (not isWarpIn) and _lockedGuidSet[unitObject.getGUID()] then
        Wait.time(function() unitObject.setLock(true) end, 5)
    end
    unitObject.setLock(false)

    local collide = false
    local fast = false
    unitObject.setPositionSmooth(position, collide, fast)
end

-------------------------------------------------------------------------------

function getBoundingBox(object)
    local bounds = object.getBounds()
    return {
        min = {
            x = bounds.center.x - bounds.size.x,
            z = bounds.center.z - bounds.size.z,
        },
        max = {
            x = bounds.center.x + bounds.size.x,
            z = bounds.center.z + bounds.size.z,
        },
    }
end

function isInsideBoundingBox(p, bb)
    return p.x >= bb.min.x and p.x <= bb.max.x and p.z >= bb.min.z and p.z <= bb.max.z
end

function warpIn()
    local systemObject = _activeSystemGuid and getObjectFromGUID(_activeSystemGuid)
    if not systemObject then
        broadcastToAll(TAG .. ': no activated system', 'Red')
        return
    end

    local tokenToPos = {}
    local unitToPos = {}

    local hex = _systemHelper.hexFromPosition(systemObject.getPosition())
    local bb = getBoundingBox(systemObject)
    for _, unit in ipairs(_unitHelper.getUnits()) do
        local p = unit.position
        if isInsideBoundingBox(p, bb) and hex == _systemHelper.hexFromPosition(p) then
            p = self.positionToWorld(systemObject.positionToLocal(p))
            local object = getObjectFromGUID(unit.guid)
            if object then
                if object.tag == 'Tile' then
                    tokenToPos[unit] = p
                else
                    unitToPos[unit] = p
                end
            end
        end
    end

    _lockedGuidSet = {}
    local extraY = 0
    for unit, p in pairs(tokenToPos) do
        local object = getObjectFromGUID(unit.guid)
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        moveUnit(object, p, true)
    end
    for unit, p in pairs(unitToPos) do
        local object = getObjectFromGUID(unit.guid)
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        moveUnit(object, p, true)
    end
end

function warpOut()
    local systemObject = _activeSystemGuid and getObjectFromGUID(_activeSystemGuid)
    if not systemObject then
        broadcastToAll(TAG .. ': no activated system', 'Red')
        return
    end

    local tokenToPos = {}
    local unitToPos = {}

    local hex = _systemHelper.hexFromPosition(systemObject.getPosition())
    local bb = getBoundingBox(self)
    for _, unit in ipairs(_unitHelper.getUnits()) do
        local p = unit.position
        if isInsideBoundingBox(p, bb) then
            p = systemObject.positionToWorld(self.positionToLocal(p))
            if hex == _systemHelper.hexFromPosition(p) then
                local object = getObjectFromGUID(unit.guid)
                if object then
                    if object.tag == 'Tile' then
                        tokenToPos[unit] = p
                    else
                        unitToPos[unit] = p
                    end
                end
            end
        end
    end

    local extraY = 0
    for unit, p in pairs(tokenToPos) do
        local object = getObjectFromGUID(unit.guid)
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        moveUnit(object, p, false)
    end
    for unit, p in pairs(unitToPos) do
        local object = getObjectFromGUID(unit.guid)
        p.y = p.y + 1 + extraY
        extraY = extraY + 0.05
        moveUnit(object, p, false)
    end
    _lockedGuidSet = {}
end

-------------------------------------------------------------------------------

function createButtons()
    local x = 0.6
    local y = 0.11
    local z = -2.35
    local width = 500
    local height = 140
    local fontSize = 90
    local scaleUpDown = 4

    self.createButton({
        click_function = 'warpIn',
        function_owner = self,
        label          = 'WARP IN',
        position       = { x = -x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1/scaleUpDown, y = 1, z = 1/scaleUpDown },
        width          = width * scaleUpDown,
        height         = height * scaleUpDown,
        font_size      = fontSize * scaleUpDown,
        tooltip        = 'Tranport units from the active system to this arena tile'
    })
    self.createButton({
        click_function = 'warpOut',
        function_owner = self,
        label          = 'WARP OUT',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1/scaleUpDown, y = 1, z = 1/scaleUpDown },
        width          = width * scaleUpDown,
        height         = height * scaleUpDown,
        font_size      = fontSize * scaleUpDown,
        tooltip        = 'Tranport units from this arena tile to the active system'
    })
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
